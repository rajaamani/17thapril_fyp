{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2c143f7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:04.825637Z",
     "iopub.status.busy": "2024-04-17T11:52:04.825266Z",
     "iopub.status.idle": "2024-04-17T11:52:05.766638Z",
     "shell.execute_reply": "2024-04-17T11:52:05.765713Z"
    },
    "papermill": {
     "duration": 0.949655,
     "end_time": "2024-04-17T11:52:05.768645",
     "exception": false,
     "start_time": "2024-04-17T11:52:04.818990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/final-year-project/NeighRadius.csv\n",
      "/kaggle/input/final-year-project/Radius.csv\n",
      "/kaggle/input/final-year-project/Face.csv\n",
      "/kaggle/input/final-year-project/NeighFace.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "373c5724",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:05.779334Z",
     "iopub.status.busy": "2024-04-17T11:52:05.778797Z",
     "iopub.status.idle": "2024-04-17T11:52:07.671085Z",
     "shell.execute_reply": "2024-04-17T11:52:07.669951Z"
    },
    "papermill": {
     "duration": 1.900342,
     "end_time": "2024-04-17T11:52:07.673927",
     "exception": false,
     "start_time": "2024-04-17T11:52:05.773585",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import ElasticNet\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.model_selection import train_test_split,GridSearchCV\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import PolynomialFeatures\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6297c11c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:07.683999Z",
     "iopub.status.busy": "2024-04-17T11:52:07.683619Z",
     "iopub.status.idle": "2024-04-17T11:52:11.488760Z",
     "shell.execute_reply": "2024-04-17T11:52:11.487877Z"
    },
    "papermill": {
     "duration": 3.812579,
     "end_time": "2024-04-17T11:52:11.490877",
     "exception": false,
     "start_time": "2024-04-17T11:52:07.678298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_face = pd.read_csv('/kaggle/input/final-year-project/Face.csv')\n",
    "df_neigh_face= pd.read_csv('/kaggle/input/final-year-project/NeighFace.csv')\n",
    "df_neigh_radius= pd.read_csv('/kaggle/input/final-year-project/NeighRadius.csv')\n",
    "df_radius = pd.read_csv('/kaggle/input/final-year-project/Radius.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad0e8c06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.500385Z",
     "iopub.status.busy": "2024-04-17T11:52:11.499333Z",
     "iopub.status.idle": "2024-04-17T11:52:11.531719Z",
     "shell.execute_reply": "2024-04-17T11:52:11.530335Z"
    },
    "papermill": {
     "duration": 0.03963,
     "end_time": "2024-04-17T11:52:11.534389",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.494759",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>t1</th>\n",
       "      <th>t2</th>\n",
       "      <th>t3</th>\n",
       "      <th>t4</th>\n",
       "      <th>t5</th>\n",
       "      <th>t6</th>\n",
       "      <th>t7</th>\n",
       "      <th>t8</th>\n",
       "      <th>t9</th>\n",
       "      <th>...</th>\n",
       "      <th>t1873</th>\n",
       "      <th>t1874</th>\n",
       "      <th>t1875</th>\n",
       "      <th>t1876</th>\n",
       "      <th>t1877</th>\n",
       "      <th>t1878</th>\n",
       "      <th>t1879</th>\n",
       "      <th>t1880</th>\n",
       "      <th>t1881</th>\n",
       "      <th>t1882</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>g1</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>g2</td>\n",
       "      <td>28</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>27</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>g3</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>g4</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>g5</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>g4996</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>g4997</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>...</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>g4998</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>14</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>13</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>g4999</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>g5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5000 rows × 1883 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  t1  t2  t3  t4  t5  t6  t7  t8  t9  ...  t1873  t1874  t1875  \\\n",
       "0            g1  16  16  16  16  16  16  16  16  16  ...      0      0      0   \n",
       "1            g2  28  27  27  27  25  25  25  25  25  ...     21     21     21   \n",
       "2            g3  16  16  16  16  16  16  16  16  16  ...      0      0      0   \n",
       "3            g4  13  13  13  12  12  12  12  12  12  ...      0      0      0   \n",
       "4            g5  12  12  12  12  12  12  12  12  12  ...      0      0      0   \n",
       "...         ...  ..  ..  ..  ..  ..  ..  ..  ..  ..  ...    ...    ...    ...   \n",
       "4995      g4996  18  18  18  18  18  18  18  18  18  ...      0      0      0   \n",
       "4996      g4997  26  26  26  26  26  26  26  26  26  ...     16     16     16   \n",
       "4997      g4998  14  12  12  13  13  14  13  13  13  ...      0      0      0   \n",
       "4998      g4999  20  20  20  20  20  20  20  20  20  ...      0      0      0   \n",
       "4999      g5000   0   0   0   0   0   0   0   0   0  ...      0      0      0   \n",
       "\n",
       "      t1876  t1877  t1878  t1879  t1880  t1881  t1882  \n",
       "0         0      0      0      0      0      0      0  \n",
       "1        21     21     21     21     21     21     21  \n",
       "2         0      0      0      0      0      0      0  \n",
       "3         0      0      0      0      0      0      0  \n",
       "4         0      0      0      0      0      0      0  \n",
       "...     ...    ...    ...    ...    ...    ...    ...  \n",
       "4995      0      0      0      0      0      0      0  \n",
       "4996     16     16     16     16     16     16     16  \n",
       "4997      0      0      0      0      0      0      0  \n",
       "4998      0      0      0      0      0      0      0  \n",
       "4999      0      0      0      0      0      0      0  \n",
       "\n",
       "[5000 rows x 1883 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_face"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "00645102",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.545476Z",
     "iopub.status.busy": "2024-04-17T11:52:11.544651Z",
     "iopub.status.idle": "2024-04-17T11:52:11.549550Z",
     "shell.execute_reply": "2024-04-17T11:52:11.548652Z"
    },
    "papermill": {
     "duration": 0.012474,
     "end_time": "2024-04-17T11:52:11.551446",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.538972",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "columns_to_keep = ['Unnamed: 0'] + [f't{i}' for i in range(21, 51)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c4a012c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.561842Z",
     "iopub.status.busy": "2024-04-17T11:52:11.561446Z",
     "iopub.status.idle": "2024-04-17T11:52:11.574721Z",
     "shell.execute_reply": "2024-04-17T11:52:11.573313Z"
    },
    "papermill": {
     "duration": 0.021352,
     "end_time": "2024-04-17T11:52:11.577350",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.555998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_face_filtered = df_face[columns_to_keep]\n",
    "df_neigh_face_filtered = df_neigh_face[columns_to_keep]\n",
    "df_neigh_radius_filtered = df_neigh_radius[columns_to_keep]\n",
    "df_radius_filtered = df_radius[columns_to_keep]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5540f676",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.588095Z",
     "iopub.status.busy": "2024-04-17T11:52:11.587683Z",
     "iopub.status.idle": "2024-04-17T11:52:11.606760Z",
     "shell.execute_reply": "2024-04-17T11:52:11.605731Z"
    },
    "papermill": {
     "duration": 0.026534,
     "end_time": "2024-04-17T11:52:11.608477",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.581943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>t21</th>\n",
       "      <th>t22</th>\n",
       "      <th>t23</th>\n",
       "      <th>t24</th>\n",
       "      <th>t25</th>\n",
       "      <th>t26</th>\n",
       "      <th>t27</th>\n",
       "      <th>t28</th>\n",
       "      <th>t29</th>\n",
       "      <th>...</th>\n",
       "      <th>t41</th>\n",
       "      <th>t42</th>\n",
       "      <th>t43</th>\n",
       "      <th>t44</th>\n",
       "      <th>t45</th>\n",
       "      <th>t46</th>\n",
       "      <th>t47</th>\n",
       "      <th>t48</th>\n",
       "      <th>t49</th>\n",
       "      <th>t50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>g1</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>g2</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>g3</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>g4</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>g5</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4995</th>\n",
       "      <td>g4996</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>17</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4996</th>\n",
       "      <td>g4997</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4997</th>\n",
       "      <td>g4998</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4998</th>\n",
       "      <td>g4999</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4999</th>\n",
       "      <td>g5000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5000 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  t21  t22  t23  t24  t25  t26  t27  t28  t29  ...  t41  t42  \\\n",
       "0            g1   15   15   15   15   15   15   15   15   15  ...   15   15   \n",
       "1            g2   25   25   25   25   25   25   25   25   25  ...   25   25   \n",
       "2            g3   17   17   16   15   15   15   15   15   15  ...   15   15   \n",
       "3            g4   12   12   12   12   12   12   12   12   12  ...   12   12   \n",
       "4            g5   12   12   12   12   12   12   12   12   12  ...   12   12   \n",
       "...         ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...   \n",
       "4995      g4996   18   18   18   18   18   18   18   18   17  ...   17   17   \n",
       "4996      g4997   26   26   26   26   26   25   25   25   25  ...   25   25   \n",
       "4997      g4998    8    8    8    9    8    8    8    8    8  ...    8    8   \n",
       "4998      g4999   20   20   21   21   21   21   21   20   20  ...   19   19   \n",
       "4999      g5000    0    0    0    0    0    0    0    0    0  ...    0    0   \n",
       "\n",
       "      t43  t44  t45  t46  t47  t48  t49  t50  \n",
       "0      15   15   15   15   15   15   15   15  \n",
       "1      25   25   25   25   25   25   25   25  \n",
       "2      15   15   14   14   14   14   14   14  \n",
       "3      12   12   12   12   12   12   12   12  \n",
       "4      12   12   12   12   12   12   12   12  \n",
       "...   ...  ...  ...  ...  ...  ...  ...  ...  \n",
       "4995   17   17   17   17   17   17   17   17  \n",
       "4996   25   25   24   24   24   24   24   24  \n",
       "4997    8    8    8    8    8    8    8    8  \n",
       "4998   19   19   19   19   19   19   19   19  \n",
       "4999    0    0    0    0    0    0    0    0  \n",
       "\n",
       "[5000 rows x 31 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_face_filtered"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "55d03294",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.619062Z",
     "iopub.status.busy": "2024-04-17T11:52:11.618611Z",
     "iopub.status.idle": "2024-04-17T11:52:11.623086Z",
     "shell.execute_reply": "2024-04-17T11:52:11.622248Z"
    },
    "papermill": {
     "duration": 0.011654,
     "end_time": "2024-04-17T11:52:11.624754",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.613100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Initialize lists to store metrics\n",
    "avg_rmse_train = []\n",
    "avg_rmse_test = []\n",
    "avg_r2_train = []\n",
    "avg_r2_test = []\n",
    "equations = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "74e3b15b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.635977Z",
     "iopub.status.busy": "2024-04-17T11:52:11.635583Z",
     "iopub.status.idle": "2024-04-17T11:52:11.640216Z",
     "shell.execute_reply": "2024-04-17T11:52:11.639376Z"
    },
    "papermill": {
     "duration": 0.012411,
     "end_time": "2024-04-17T11:52:11.642011",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.629600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "timeframes = [f't{i}' for i in range(21, 51)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b48fe973",
   "metadata": {
    "papermill": {
     "duration": 0.004242,
     "end_time": "2024-04-17T11:52:11.651181",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.646939",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Models that give direct equations:\n",
    "* Linear Regression\n",
    "* Polynomial Regression\n",
    "* Ridge and Lasso Regression\n",
    "* Generalized Linear Models (GLM)\n",
    "* Elastic Net Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43b3cb7f",
   "metadata": {
    "papermill": {
     "duration": 0.004223,
     "end_time": "2024-04-17T11:52:11.659847",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.655624",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Elastic Net Regression**(Most advanced one)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "8b90ccf2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:11.670333Z",
     "iopub.status.busy": "2024-04-17T11:52:11.669972Z",
     "iopub.status.idle": "2024-04-17T11:52:27.099185Z",
     "shell.execute_reply": "2024-04-17T11:52:27.098320Z"
    },
    "papermill": {
     "duration": 15.437524,
     "end_time": "2024-04-17T11:52:27.101748",
     "exception": false,
     "start_time": "2024-04-17T11:52:11.664224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n"
     ]
    }
   ],
   "source": [
    "for timeframe in timeframes:\n",
    "    # Merging dataframes as per the specific timeframe\n",
    "    df_merged = df_radius_filtered[['Unnamed: 0', timeframe]].rename(columns={timeframe: 'Radius'})\n",
    "    df_merged = df_merged.merge(df_face_filtered[['Unnamed: 0', timeframe]], on='Unnamed: 0').rename(columns={timeframe: 'Face'})\n",
    "    df_merged = df_merged.merge(df_neigh_radius_filtered[['Unnamed: 0', timeframe]], on='Unnamed: 0').rename(columns={timeframe: 'NeighRadius'})\n",
    "    df_merged = df_merged.merge(df_neigh_face_filtered[['Unnamed: 0', timeframe]], on='Unnamed: 0').rename(columns={timeframe: 'NeighFace'})\n",
    "\n",
    "    X = df_merged[['Face', 'NeighRadius', 'NeighFace']]\n",
    "    y = df_merged['Radius']\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    # Define a pipeline with StandardScaler, PolynomialFeatures, and ElasticNet\n",
    "    pipeline = Pipeline([\n",
    "        ('scaler', StandardScaler()),\n",
    "        ('poly', PolynomialFeatures(degree=2)),\n",
    "        ('elasticnet', ElasticNet(random_state=42))\n",
    "    ])\n",
    "\n",
    "    # Parameter grid for GridSearchCV\n",
    "    param_grid = {\n",
    "        'elasticnet__alpha': [0.1, 1, 10],\n",
    "        'elasticnet__l1_ratio': [0.1, 0.5, 0.9]\n",
    "    }\n",
    "\n",
    "    # GridSearchCV to find the best parameters\n",
    "    grid_search = GridSearchCV(estimator=pipeline, param_grid=param_grid, cv=5, scoring='r2', verbose=1)\n",
    "    grid_search.fit(X_train, y_train)\n",
    "\n",
    "    # Best model\n",
    "    best_model = grid_search.best_estimator_\n",
    "\n",
    "    # Make predictions\n",
    "    y_train_pred = best_model.predict(X_train)\n",
    "    y_test_pred = best_model.predict(X_test)\n",
    "\n",
    "    # Calculate and store metrics\n",
    "    avg_rmse_train.append(np.sqrt(mean_squared_error(y_train, y_train_pred)))\n",
    "    avg_rmse_test.append(np.sqrt(mean_squared_error(y_test, y_test_pred)))\n",
    "    avg_r2_train.append(r2_score(y_train, y_train_pred))\n",
    "    avg_r2_test.append(r2_score(y_test, y_test_pred))\n",
    "\n",
    "    # Store the equation coefficients\n",
    "    coef = best_model.named_steps['elasticnet'].coef_\n",
    "    intercept = best_model.named_steps['elasticnet'].intercept_\n",
    "    equation = f\"Radius = {intercept:.4f} + {coef[1]:.4f}*Face + {coef[2]:.4f}*NeighRadius + {coef[3]:.4f}*NeighFace\"\n",
    "    equations.append(equation)\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5bf1650e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-17T11:52:27.136369Z",
     "iopub.status.busy": "2024-04-17T11:52:27.135975Z",
     "iopub.status.idle": "2024-04-17T11:52:27.142078Z",
     "shell.execute_reply": "2024-04-17T11:52:27.141176Z"
    },
    "papermill": {
     "duration": 0.029464,
     "end_time": "2024-04-17T11:52:27.146557",
     "exception": false,
     "start_time": "2024-04-17T11:52:27.117093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average RMSE Train: 0.7713212268660528\n",
      "Average RMSE Test: 0.7622984041092311\n",
      "Average R² Train: 0.8471550160916507\n",
      "Average R² Test: 0.8455834415099956\n",
      "Radius = 10.6087 + 1.2426*Face + 0.6941*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6053 + 1.2523*Face + 0.7006*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6009 + 1.2639*Face + 0.7024*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6015 + 1.2763*Face + 0.7055*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6009 + 1.2898*Face + 0.7062*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6006 + 1.3037*Face + 0.7086*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5998 + 1.3160*Face + 0.7091*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6003 + 1.3298*Face + 0.7100*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5980 + 1.3442*Face + 0.7101*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5956 + 1.3584*Face + 0.7116*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5970 + 1.3746*Face + 0.7113*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5954 + 1.3889*Face + 0.7098*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5940 + 1.4043*Face + 0.7114*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5913 + 1.4168*Face + 0.7165*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.5885 + 1.4307*Face + 0.7184*NeighRadius + -0.0000*NeighFace\n",
      "Radius = 10.6144 + 1.4132*Face + 0.7886*NeighRadius + -0.0399*NeighFace\n",
      "Radius = 10.6126 + 1.4282*Face + 0.7874*NeighRadius + -0.0374*NeighFace\n",
      "Radius = 10.6118 + 1.4422*Face + 0.7886*NeighRadius + -0.0372*NeighFace\n",
      "Radius = 10.6090 + 1.4532*Face + 0.7909*NeighRadius + -0.0407*NeighFace\n",
      "Radius = 10.6078 + 1.4668*Face + 0.7920*NeighRadius + -0.0453*NeighFace\n",
      "Radius = 10.6088 + 1.4838*Face + 0.7924*NeighRadius + -0.0475*NeighFace\n",
      "Radius = 10.6086 + 1.5022*Face + 0.7915*NeighRadius + -0.0481*NeighFace\n",
      "Radius = 10.6044 + 1.5164*Face + 0.7915*NeighRadius + -0.0452*NeighFace\n",
      "Radius = 10.6036 + 1.5303*Face + 0.7956*NeighRadius + -0.0473*NeighFace\n",
      "Radius = 10.6040 + 1.5449*Face + 0.7986*NeighRadius + -0.0493*NeighFace\n",
      "Radius = 10.6065 + 1.5597*Face + 0.8029*NeighRadius + -0.0517*NeighFace\n",
      "Radius = 10.6031 + 1.5758*Face + 0.8015*NeighRadius + -0.0495*NeighFace\n",
      "Radius = 10.5978 + 1.5895*Face + 0.8209*NeighRadius + -0.0509*NeighFace\n",
      "Radius = 10.6003 + 1.6064*Face + 0.8230*NeighRadius + -0.0509*NeighFace\n",
      "Radius = 10.5892 + 1.6233*Face + 0.8524*NeighRadius + -0.0512*NeighFace\n"
     ]
    }
   ],
   "source": [
    "# Output average metrics and equations\n",
    "print(f\"Average RMSE Train: {np.mean(avg_rmse_train)}\")\n",
    "print(f\"Average RMSE Test: {np.mean(avg_rmse_test)}\")\n",
    "print(f\"Average R² Train: {np.mean(avg_r2_train)}\")\n",
    "print(f\"Average R² Test: {np.mean(avg_r2_test)}\")\n",
    "for eq in equations:\n",
    "    print(eq)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8adeb6f",
   "metadata": {
    "papermill": {
     "duration": 0.016141,
     "end_time": "2024-04-17T11:52:27.180612",
     "exception": false,
     "start_time": "2024-04-17T11:52:27.164471",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**R2 score = 0.85**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39951468",
   "metadata": {
    "papermill": {
     "duration": 0.009958,
     "end_time": "2024-04-17T11:52:27.207553",
     "exception": false,
     "start_time": "2024-04-17T11:52:27.197595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a498423d",
   "metadata": {
    "papermill": {
     "duration": 0.006061,
     "end_time": "2024-04-17T11:52:27.221705",
     "exception": false,
     "start_time": "2024-04-17T11:52:27.215644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "20f63550",
   "metadata": {
    "papermill": {
     "duration": 0.005944,
     "end_time": "2024-04-17T11:52:27.233908",
     "exception": false,
     "start_time": "2024-04-17T11:52:27.227964",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4581876,
     "sourceId": 7820320,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 25.923536,
   "end_time": "2024-04-17T11:52:27.861291",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-17T11:52:01.937755",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
